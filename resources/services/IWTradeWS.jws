import com.idega.block.trade.stockroom.business.ProductBusiness;
import com.idega.block.trade.stockroom.business.ProductPriceBusiness;
import com.idega.business.IBOLookup;
import com.idega.business.IBOLookupException;
import com.idega.idegaweb.IWMainApplication;

public class IWTradeWS {
	
	private final String SUCCESS = "iwtravel-ok";
	private final String FAILED  = "iwtravel-failed";
	
	public String invalidateProductCache(String productID, String remoteCallingHostName) {
		ProductBusiness pb;
		try {
			pb = (ProductBusiness) IBOLookup.getServiceInstance(IWMainApplication.getDefaultIWApplicationContext(), ProductBusiness.class);
			//String remoteCallingHostName = com.idega.axis.util.AxisUtil.getHttpServletRequest().getRemoteHost();
			boolean success = pb.invalidateProductCache(productID, remoteCallingHostName);
			if(success){
				return SUCCESS;
			}
			else{
				return FAILED;
			}
		}
		catch (IBOLookupException e) {
			e.printStackTrace();
			return "Service failed to decache product = "+productID+". The error message was :"+e.getMessage();
		}
	}
	public String clearAddressMaps(String productID, String remoteCallingHostName) {
		ProductBusiness pb;
		try {
			pb = (ProductBusiness) IBOLookup.getServiceInstance(IWMainApplication.getDefaultIWApplicationContext(), ProductBusiness.class);
			//String remoteCallingHostName = com.idega.axis.util.AxisUtil.getHttpServletRequest().getRemoteHost();
			boolean success = pb.clearAddressMaps(productID, remoteCallingHostName);
			if(success){
				return SUCCESS;
			}
			else{
				return FAILED;
			}
		}
		catch (IBOLookupException e) {
			e.printStackTrace();
			return "Service failed to decache product = "+productID+". The error message was :"+e.getMessage();
		}
	}	
	
	public String clearProductCache(String supplierID, String remoteCallingHostName) {
		ProductBusiness pb;
		try {
			pb = (ProductBusiness) IBOLookup.getServiceInstance(IWMainApplication.getDefaultIWApplicationContext(), ProductBusiness.class);
			//String remoteCallingHostName = com.idega.axis.util.AxisUtil.getHttpServletRequest().getRemoteHost();
			boolean success = pb.clearProductCache(supplierID, remoteCallingHostName);
			if(success){
				return SUCCESS;
			}
			else{
				return FAILED;
			}
		}
		catch (Exception e) {
			e.printStackTrace();
			return "Service failed to decache prodcct for supplier = "+supplierID+". The error message was :"+e.getMessage();
		}
	}	
	
	public String invalidatePriceCache(String productID, String remoteCallingHostName) {
		ProductPriceBusiness pb;
		try {
			pb = (ProductPriceBusiness) IBOLookup.getServiceInstance(IWMainApplication.getDefaultIWApplicationContext(), ProductPriceBusiness.class);
			//String remoteCallingHostName = com.idega.axis.util.AxisUtil.getHttpServletRequest().getRemoteHost();
			boolean success = pb.invalidateCache(productID, remoteCallingHostName);
			if(success){
				return SUCCESS;
			}
			else{
				return FAILED;
			}
		}
		catch (Exception e) {
			e.printStackTrace();
			return "Service failed to decache price for product = "+productID+". The error message was :"+e.getMessage();
		}
	}	
	
	
		
	
}